install.packages("remotes")
remotes::install_github("LTLA/csaw")
library("csaw")
library("dplyr")
library(rtracklayer)

ASMdame <- import("~/Documents/mykolasandi/Emil/C2ASM.bedgraph", format = "bedgraph")
Maxima <- findMaxima(ASMdame,  range=50, metric=runif(length(ASMdame)))



#load in the gene_names list
library(GenomicRanges)
# something here is causing an error dont know what but complains about file format. 
# the error in question. Error in bed$thickStart : $ operator is invalid for atomic vectors.

genenames.gr <- import("~/Documents/mykolasandi/Mykolas/Misc/Gene_List.bed", format = "bed")


# what regions overlap what genes? HAve to be grange object for the code to work. 
overlapGenes <- findOverlaps(ASMdame, genenames.gr)

# Return any genes with an overlap. More info about this code on https://www.biostars.org/p/147916/ 
# Convert the resulting "Hits" object to a data frame
# and use it as an index
overlapGenes.df <- as.data.frame(overlapGenes)
names(genes.gr[overlapGenes.df$subjectHits])

# extract the regions that hit genes
regionsWithHits <- as.data.frame(regions.gr[overlapGenes.df$queryHits])
# add the names of the genes
regionsWithHits$genes <- names(genes.gr)[overlapGenes.df$subjectHits]

# Some segments might not overlap any gene.
# Find the distance to the nearest gene
distanceToNearest(truepeaks, genes.gr)

# if your genes and segments were in a bed file you could easily import them
library(rtracklayer)
regions <- import.bed("myRegions.bed",asRangedData=FALSE)
genes <- import.bed("myGenes.bed",asRangedData=FALSE)
#might not be needed depends.

asmdametest <- as.data.frame(ASMdame)
peaks <- cbind(asmdametest,Maxima)
#now remove the false peaks 
#check the row name to see if it is correct for the data. 

truepeaks <- filter(peaks, Maxima==TRUE)

#apply filter to remove Zeros.   
no0zeropeaks <- filter(truepeaks, truepeaks$score>0)
#check if truepeaks is grange or regular df. 


#try to plot 
library("ggplot2")


ggplot(ToothGrowth, aes(x = genename, y = ASM_score))+
  geomboxplot(notch = TRUE, fill = "lightgray")+
  stat_summary(fun.y = mean, geom = "point",
               shape = 18, size = 2.5, color = "#FC4E07")+
  scale_x_discrete(limits=c("GNAS", "SNRPN", "H19/IGF2"))
